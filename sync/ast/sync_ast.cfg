#-----------------------------------------------------------------
# Each entry is a Node sub-class name, listing the attributes
# and child nodes of the class:
#   <name>*     - a child node
#   <name>**    - a sequence of child nodes
#   <name>      - an attribute
#
# Copyright (C) 2014
# License: BSD
#-----------------------------------------------------------------

# name -> ID
# inputs -> PortList
# outputs -> PortList
# decls -> DeclList
# states -> StateList
Sync: [name*, inputs*, outputs*, decls*, states*, configs]

# ports -> [Port, ...]
PortList: [ports**]

# name -> ID
# depth_exp -> ID | NUMBER | DepthExp | DepthNone
Port: [name*, depth_exp*]

# depth -> ID
# shift -> NUMBER
DepthExp: [depth*, sign, shift*]
DepthNone: []

# decls -> [StoreVar | StateVar, ...]
DeclList: [decls**]

# name -> ID
StoreVar: [name*]

# name -> ID
# type -> IntType | EnumType
# value -> NUMBER
StateVar: [name*, type*, value*]

# size -> NUMBER
IntType: [size*]

# labels -> [ID, ...]
EnumType: [labels**]

# states -> [State, ...]
StateList: [states**]

# name -> ID
# trans_orders -> [TransOrder, ...]
State: [name*, trans_orders**]

# trans_stmt -> [Trans, ...]
TransOrder: [trans_stmt**]

# port -> Port
# condition -> CondSegmark | CondDataMsg | CondEmpty | CondElse
# guard -> IntExp
# actions -> [Assign | Send | Goto, ...]
Trans: [port*, condition*, guard*, actions**]

# depth -> ID
CondSegmark: [depth*]

# choice -> ID
# tail -> ID
# labels -> [ID, ...]
CondDataMsg: [choice*, labels**, tail*]

CondEmpty: []
CondElse: []

# lhs -> ID
# rhs -> DataExp | IntExp
Assign: [lhs*, rhs*]

# items -> [ItemThis | ItemVar | ItemExpand | ItemPair, ...]
DataExp: [items**]

ItemThis: []
# name -> ID
ItemVar: [name*]
# name -> ID
ItemExpand: [name*]

# label -> ID
# value -> ID | IntExp
ItemPair: [label*, value*]

# msg -> MsgSegmark | MsgData | MsgNil
# post -> ID
Send: [msg*, port*]

# depth -> ID | IntExp
MsgSegmark: [depth*]

# choice -> ID
# data_exp -> DataExp
MsgData: [choice*, data_exp*]
MsgNil: []

# states -> [ID, ...]
Goto: [states**]

ID: [value]
NUMBER: [value]
TERM: [value]
IntExp: [exp, args, terms]
